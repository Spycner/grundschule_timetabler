version: '3.8'

services:
  # Backend API - Production configuration
  backend:
    # Use pre-built image from GitHub Container Registry
    image: ghcr.io/spycner/grundschule_timetabler:latest
    # Or build locally if needed:
    # build:
    #   context: ./backend
    #   dockerfile: Dockerfile
    container_name: grundschule-backend
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    volumes:
      - ./backend/alembic:/app/alembic:ro
      - ./backend/src:/app/src:ro
    depends_on:
      db:
        condition: service_healthy
      valkey:
        condition: service_healthy
    networks:
      - grundschule-network
    restart: always
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers 4
      "

  # PostgreSQL Database - Production
  db:
    image: postgres:16-alpine
    container_name: grundschule-db
    env_file:
      - .env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grundschule-network
    restart: always

  # Valkey - Production
  valkey:
    image: valkey/valkey:7-alpine
    container_name: grundschule-valkey
    volumes:
      - valkey_data:/data
      - ./valkey.conf:/usr/local/etc/valkey/valkey.conf:ro
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - grundschule-network
    restart: always
    command: valkey-server /usr/local/etc/valkey/valkey.conf

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: grundschule-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - backend
    networks:
      - grundschule-network
    restart: always

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: grundschule-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - grundschule-network
    restart: always

networks:
  grundschule-network:
    driver: bridge

volumes:
  postgres_data:
  valkey_data:
