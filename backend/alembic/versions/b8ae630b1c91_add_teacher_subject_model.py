"""add_teacher_subject_model

Revision ID: b8ae630b1c91
Revises: 214fec70abb4
Create Date: 2025-08-03 17:01:04.468292

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b8ae630b1c91'
down_revision: Union[str, Sequence[str], None] = '214fec70abb4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create enum type if it doesn't exist (PostgreSQL only)
    connection = op.get_bind()
    
    if connection.dialect.name == 'postgresql':
        enum_exists = connection.execute(
            sa.text("""
                SELECT EXISTS (
                    SELECT 1 FROM pg_type 
                    WHERE typname = 'qualificationlevel'
                )
            """)
        ).scalar()
        
        if not enum_exists:
            qualificationlevel = sa.Enum('PRIMARY', 'SECONDARY', 'SUBSTITUTE', name='qualificationlevel')
            qualificationlevel.create(connection)
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('teacher_subjects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.Column('qualification_level', sa.Enum('PRIMARY', 'SECONDARY', 'SUBSTITUTE', name='qualificationlevel'), nullable=False),
    sa.Column('grades', sa.JSON(), nullable=True),
    sa.Column('max_hours_per_week', sa.Integer(), nullable=True),
    sa.Column('certification_date', sa.Date(), nullable=True),
    sa.Column('certification_expires', sa.Date(), nullable=True),
    sa.Column('certification_document', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    # Note: Grades validation handled in application code due to DB compatibility issues
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('teacher_id', 'subject_id', name='uq_teacher_subject')
    )
    with op.batch_alter_table('teacher_subjects', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_teacher_subjects_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_teacher_subjects_subject_id'), ['subject_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_teacher_subjects_teacher_id'), ['teacher_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('teacher_subjects', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_teacher_subjects_teacher_id'))
        batch_op.drop_index(batch_op.f('ix_teacher_subjects_subject_id'))
        batch_op.drop_index(batch_op.f('ix_teacher_subjects_id'))

    op.drop_table('teacher_subjects')
    
    # Drop enum type if it exists and is not used by other tables (PostgreSQL only)
    connection = op.get_bind()
    
    if connection.dialect.name == 'postgresql':
        enum_exists = connection.execute(
            sa.text("""
                SELECT EXISTS (
                    SELECT 1 FROM pg_type 
                    WHERE typname = 'qualificationlevel'
                )
            """)
        ).scalar()
        
        if enum_exists:
            qualificationlevel = sa.Enum('PRIMARY', 'SECONDARY', 'SUBSTITUTE', name='qualificationlevel')
            qualificationlevel.drop(connection)
    # ### end Alembic commands ###
